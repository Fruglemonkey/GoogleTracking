"""This module contains functions for making a graph and finding the shortest
path between each node in that path."""
# Import graphviz
import gv

# Import pygraph
from pygraph.readwrite.dot import write
from pygraph.algorithms.generators import generate
from pygraph.algorithms.minmax import shortest_path
from pygraph.algorithms.heuristics.chow import chow
from pygraph.algorithms.minmax import heuristic_search


def graphgen(grnodes):
    """Initialises the graph. Ensures that all nodes in the graph are connected.
    Creates an image called graph.png which represents the graph.
    """
    graph = generate(grnodes, int(1.2*grnodes),
                     directed=False, weight_range=(1, 1))
    # Makes sure graphs generated by generate() have all their nodes connected.
    while len(shortest_path(graph, 0)[1]) < grnodes:
        graph = generate(grnodes, int(1.2*grnodes),
                         directed=False, weight_range=(1, 1))
        # print len(shortest_path(graph, 0)[1])
    # Draw as PNG
    dot = write(graph)
    gvv = gv.readstring(dot)
    gv.layout(gvv, 'dot')
    gv.render(gvv, 'png', 'graph.png')
    return graph


def pathgen(graph):
    """Calculates the shortest path from each node to each other node."""
    # grnodes = len(graph.nodes())
    h = chow(1)         # Needed for heuristic_search()
    h.optimize(graph)
    paths = [[] for x in range(len(graph.nodes()))]
    for j in graph.nodes():
        for i in graph.nodes():
            paths[j].append(heuristic_search(graph, j, i, h))
    return paths

if __name__ == '__main__':
    g = graphgen(int(input("How many nodes? ")))
    print pathgen(g)[0][1][1]
